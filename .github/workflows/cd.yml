name: Backend CD # actions 이름

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'

      # 2. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 3. application-prod.yml 생성
      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml
        shell: bash

      # 4. application-oauth.yml 생성
      - name: Make application-oauth.yml
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.yml
        shell: bash

      # 5. application-redis.yml 생성
      - name: Make application-redis.yml
        run: |
          cd ./src/main/resources
          touch ./application-redis.yml
          echo "${{ secrets.APPLICATION_REDIS }}" > ./application-redis.yml
        shell: bash

      # 6. application-ai.yml 생성
      - name: Make application-ai.yml
        run: |
          cd ./src/main/resources
          touch ./application-ai.yml
          echo "${{ secrets.APPLICATION_AI }}" > ./application-ai.yml
        shell: bash

      # 7. Gradlew 권한 부여
      - name: Grant execute permission to Gradlew
        run: chmod +x ./gradlew

      # 8. 스프링부트 애플리케이션 빌드
      - name: Build Spring Boot application
        run: ./gradlew bootJar

      # 9. 도커 이미지 빌드
      - name: Build Docker image
        run: |
          sudo docker build -t ${{ secrets.DOCKER_IMG }} --platform linux/amd64 .

      # 10. 도커 이미지 푸시
      - name: Push Docker image
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker push ${{ secrets.DOCKER_IMG }}

      # 11. Docker Compose 파일을 EC2로 전송
      - name: Transfer docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/ec2-user"

      # 12. 배포 스크립트 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/ec2-user
            if [ "$(sudo docker ps -a -q)" ]; then
              sudo docker stop $(sudo docker ps -a -q)
              sudo docker rm -f $(sudo docker ps -a -q)
            fi
            sudo docker pull ${{ secrets.DOCKER_FRONT_IMG }}
            sudo docker pull ${{ secrets.DOCKER_IMG }}
            sudo docker-compose -f docker-compose.yml up -d
            sudo docker image prune -f
